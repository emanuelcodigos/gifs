{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","categ","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","props","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGif","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAa,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEvB,EAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYD,OACI,sBAAMC,SAPY,SAACC,GACnBA,EAAEC,iBACFN,GAAc,SAAAO,GAAK,OAAKL,GAAL,mBAAmBK,OACtCJ,EAAc,KAId,SACA,uBAAOK,KAAK,OAAOC,MAAOP,EAC1BQ,SAbuB,SAACL,GACvBF,EAAcE,EAAEM,OAAOF,a,+BCRnBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAIKI,MAAOF,GAJZ,cAIbG,EAJa,gBAKEA,EAAUC,OALZ,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAiBZM,GAjBY,4CAAH,sDCEPO,EAAc,SAACC,GAExB,OACI,qBAAKC,UAAU,yCAAf,SACI,qBAAKC,IAAKF,EAAMd,IAAKiB,IAAKH,EAAMJ,WCF/BQ,EAAU,SAAC,GAAe,IAAdpB,EAAa,EAAbA,SAErB,ECHuB,SAACA,GAExB,MAA0BZ,mBAAS,CAE/BmB,KAAK,GACLc,SAAQ,IAHZ,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAZAC,qBAAW,WAEPzB,EAASC,GACRyB,MAAK,SAAAC,GACFH,EAAS,CACLhB,KAAKmB,EACLL,SAAQ,SAGjB,CAACrB,IAGGsB,EDjBiBK,CAAY3B,GAA7BO,EAAP,EAAOA,KAAMc,EAAb,EAAaA,QAEb,OACI,sBAAKJ,UAAU,GAAf,UACA,6BAAKjB,IACD,sBAAKiB,UAAU,YAAf,UAEGI,GAAW,wCAEZd,EAAKE,KAAK,SAACC,GAAD,OACP,cAAC,EAAD,eAEIA,GADCA,EAAIC,cEZbiB,EAAe,SAAC,GAA6B,IAAD,IAA3BhC,aAA2B,MAAnB,eAAmB,EAEtD,EAAoCR,mBAAS,CAAC,mBAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAEC,OACC,sBAAK8B,UAAU,YAAf,UACA,oBAAIA,UAAU,eAAd,SAA8BrB,IAC9B,uBACA,cAAC,EAAD,CAAaT,cAAeA,IAIpB0C,EAAWpB,KAAK,SAAAT,GAAQ,OAErB,cAAC,EAAD,CAEGA,SAAUA,GADLA,U,MCbxB8B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.59b16e39.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory= ({setcategories}) => {\r\n\r\n     const [inputValue, setInputValue]= useState('');\r\n\r\n     const handleInputChange = (e) => {\r\n         setInputValue(e.target.value)\r\n     };\r\n\r\n     const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        setcategories(categ => [inputValue,...categ]);\r\n        setInputValue('');\r\n     };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" value={inputValue}\r\n        onChange={handleInputChange}\r\n        ></input>\r\n        </form>\r\n    )\r\n};\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setcategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n","export const getGifs = async(category) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=15&api_key=FjsZTfVY4Hz8DVEawATMPGweSOO01kih`;\r\n    \r\n    const respuesta = await fetch( url );\r\n    const {data} = await respuesta.json();\r\n    \r\n    const gifs = data.map(img => {\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n     \r\n     });\r\n\r\n    return gifs;\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = (props) =>{\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={props.url} alt={props.title}></img>\r\n        </div>\r\n    )\r\n\r\n};","import { useFetchGif } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\n\r\nexport const GifGrid = ({category}) =>{\r\n\r\n    const {data, loading} = useFetchGif(category);\r\n\r\n    return (\r\n        <div className=\"\">\r\n        <h3>{category}</h3>\r\n            <div className=\"card-grid\">\r\n                \r\n              {loading && <p>Loading</p>}\r\n              { \r\n              data.map( (img) => (\r\n                 <GifGridItem \r\n                 key={img.id}\r\n                 {...img}/> \r\n              ))\r\n\r\n              }\r\n            </div>\r\n        </div>\r\n    );\r\n}; ","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGif = (category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n        .then(imgs => {\r\n            setstate({\r\n                data:imgs,\r\n                loading:false\r\n            });\r\n        });\r\n    }, [category]);\r\n\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = ({value = 'GifExpertApp'}) =>{\r\n\r\n   const [categories, setcategories] = useState(['Rick And Morty']);\r\n   \r\n    return (\r\n     <div className=\"container\">\r\n     <h2 className=\"txtPrincipal\">{value}</h2>\r\n     <hr></hr>\r\n     <AddCategory setcategories={setcategories} />\r\n     \r\n         {\r\n            \r\n             categories.map( category => (\r\n\r\n                <GifGrid \r\n                   key={category}\r\n                   category={category}\r\n                 />\r\n             ))\r\n         }\r\n     \r\n     </div>\r\n    \r\n    );\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp/>,\n    document.getElementById('root')\n);\n\n\n\n\n"],"sourceRoot":""}